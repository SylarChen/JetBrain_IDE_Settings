<application>
  <component name="AppStorage">
    <histories>
      <item value="as" />
      <item value="5天以外" />
      <item value="5天意外" />
      <item value="5天外" />
      <item value="超过5天" />
      <item value="超过天数" />
      <item value="manner" />
      <item value="nt Model" />
      <item value="process" />
      <item value="amount" />
      <item value="少量" />
      <item value="余票紧张" />
      <item value="sold Out" />
      <item value="预约" />
      <item value="二级缓存" />
      <item value="/** * Load the initial caches for this cache manager. * &lt;p&gt;Called by {@link #afterPropertiesSet()} on startup. * The returned collection may be empty but must not be {@code null}. */" />
      <item value="* Initialize the static configuration of caches. * &lt;p&gt;Triggered on startup through {@link #afterPropertiesSet()}; * can also be called to re-initialize at runtime. * @since 4.2.2 * @see #loadCaches()" />
      <item value="internal" />
      <item value="* Return the value to which this cache maps the specified key, obtaining * that value from {@code valueLoader} if necessary. This method provides * a simple substitute for the conventional &quot;if cached, return; otherwise * create, cache and return&quot; pattern." />
      <item value="irrelevant" />
      <item value="variant" />
      <item value="Return the value to which this cache maps the specified key, * generically specifying a type that return value will be cast to. * &lt;p&gt;Note: This variant of {@code get} does not allow for differentiating * between a cached {@code null} value and no cache entry found at all. * Use the standard {@link #get(Object)} variant for that purpose instead. * @param key the key whose associated value is to be returned * @param type the required type of the returned value (may be * {@code null} to bypass a type check; in case of a {@code null} * value found in the cache, the specified type is irrelevant) * @return the value to which this cache maps the specified key * (which may be {@code null} itself), or also {@code null} if * the cache contains no mapping for this key * @throws IllegalStateException if a cache entry has been found * but failed to match the specified type * @since 4.0 * @see #get(Object)" />
      <item value="the value to which this cache maps the specified key, * contained within a {@link ValueWrapper} which may also hold * a cached {@code null} value. A straight {@code null} being * returned means that the cache contains no mapping for this key. * @see #get(Object, Class)" />
      <item value="the key whose associated value is to be returned" />
      <item value="Return the value to which this cache maps the specified key" />
      <item value="Return" />
      <item value="associate" />
      <item value="阿萨德" />
      <item value="/** * Return the value to which this cache maps the specified key. * &lt;p&gt;Returns {@code null} if the cache contains no mapping for this key; * otherwise, the cached value (which may be {@code null} itself) will * be returned in a {@link ValueWrapper}. * @param key the key whose associated value is to be returned * @return the value to which this cache maps the specified key, * contained within a {@link ValueWrapper} which may also hold * a cached {@code null} value. A straight {@code null} being * returned means that the cache contains no mapping for this key. * @see #get(Object, Class) */" />
      <item value="that" />
      <item value="which" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="19" />
        <entry key="ENGLISH" value="19" />
      </map>
    </option>
  </component>
</application>